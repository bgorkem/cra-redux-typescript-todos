{"version":3,"sources":["store/types.ts","store/state.ts","store/index.ts","components/TodoList.tsx","store/actions.ts","components/NewTodo.tsx","components/UserLogin.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LOGIN_ACTION","ADD_TODO_ACTION","TOGGLE_TODO_ACTION","defaultState","user","todos","id","text","completed","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","store","next","action","console","log","result","getState","createStore","state","type","todo","payload","todoId","toUpdateId","findIndex","currentTodo","updatedTodo","splice","undefined","List","toggle","map","key","checked","onChange","TodoList","useSelector","dispatch","useDispatch","toggleTodo","NewTodo","inputEl","useRef","className","ref","placeholder","name","onClick","current","input","uniqueId","value","App","UserLogin","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f476aae.chunk.js","sourcesContent":["export const LOGIN_ACTION = 'LOGIN_ACTION';\n\nexport interface LoginActionType {\n  type: typeof LOGIN_ACTION;\n  payload: {\n    user: string;\n  };\n}\n\nexport const ADD_TODO_ACTION = 'ADD_TODO_ACTION';\n\nexport interface AddTodoActionType {\n  type: typeof ADD_TODO_ACTION;\n  payload: {\n    todo: Todo;\n  };\n}\n\nexport const TOGGLE_TODO_ACTION='TOGGLE_TODO_ACTION';\n\nexport interface ToggleTodoActionType {\n  type: typeof TOGGLE_TODO_ACTION;\n  payload: {\n    todoId: string\n  }\n}\n\nexport type SystemActions = AddTodoActionType | LoginActionType | ToggleTodoActionType;\n\n\nexport type Todo = {\n  id: string;\n  text: string;\n  completed: boolean;\n};\n\nexport type AppState = {\n  user: string;\n  todos: Todo[];\n};\n\n","import { AppState, SystemActions, ADD_TODO_ACTION, LOGIN_ACTION, TOGGLE_TODO_ACTION } from \"./types\";\n\n/**\n * Default Application State, with empty user and todos\n */\nconst defaultState: AppState = {\n  user: 'anonymous',\n  todos: [ \n    {id:'todo-1', text:'put the bin out', completed :true },\n    {id:'todo-2', text:'do the home work', completed :false }\n  ]\n};\n\n/**\n * Root State Reducer\n * @param state current state of application\n * @param action action posted\n */\nexport const rootReducer = (\n  state = defaultState,\n  action: SystemActions\n): AppState => {\n\n  // add todo action\n  if (action.type === ADD_TODO_ACTION) {\n    const { todo } = action.payload;\n    const todos = [...state.todos, todo];\n    return { ...state, todos };\n  }\n\n  // login action\n  if (action.type === LOGIN_ACTION) {\n    const { user } = action.payload;\n    return { ...state, user };\n  }\n\n  // complete todo action\n  if (action.type === TOGGLE_TODO_ACTION) {\n    const { todoId } = action.payload;\n    const toUpdateId = state.todos.findIndex(todo => todo.id === todoId);\n\n    if (toUpdateId > -1) {\n      const todos = [...state.todos];\n      const currentTodo= todos[toUpdateId];\n      const updatedTodo = { ...currentTodo, completed: !currentTodo.completed };\n      todos.splice(toUpdateId, 1, updatedTodo);\n      return {...state, todos}\n    }\n  }\n  return state;\n};\n","import { createStore, applyMiddleware, compose, Middleware } from 'redux';\nimport { rootReducer } from './state';\n\n// need to declare this as a global..\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: typeof compose;\n  }\n}\n\nconst logger: Middleware = store => next => action => {\n  console.log('dispatching action', action);\n  const result = next(action);\n  console.log('after action', store.getState());\n  return result;\n}\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst enhancer = composeEnhancers(applyMiddleware(logger));\n\nexport const store = createStore(rootReducer, undefined, enhancer);\n","import React from 'react';\n\nimport { AppState } from '../store/types';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Todo } from '../store/types';\nimport { toggleTodo } from '../store/actions';\n\nimport './TodoList.css';\n\n\nconst List = ({ todos, toggle }: { todos: Todo[], toggle: (todoId: string) => any }) => (\n  <ul>\n    {todos.map(todo => (\n      <li key={todo.id}>\n        <input type='checkbox' checked={todo.completed} onChange={() => { toggle(todo.id) }}></input>\n        {`${todo.text}`}\n      </li>\n    ))}\n  </ul>\n);\n\n\nexport const TodoList = () => {\n  let todos = useSelector((state: AppState) => state.todos)\n  let dispatch = useDispatch();\n  console.log('todos', todos);\n  return (\n    <List todos={todos} toggle={(todoId: string) => { dispatch(toggleTodo(todoId)) }} />\n  )\n}\n","import { LoginActionType, AddTodoActionType, LOGIN_ACTION, ADD_TODO_ACTION, Todo, ToggleTodoActionType, TOGGLE_TODO_ACTION } from \"./types\";\n\nexport function loginAction(user: string): LoginActionType {\n  return {\n    type: LOGIN_ACTION,\n    payload: {\n      user\n    }\n  };\n}\n\n\nexport function addTodoAction(todo: Todo): AddTodoActionType {\n  return {\n    type: ADD_TODO_ACTION,\n    payload: {\n      todo\n    }\n  };\n}\n\nexport function toggleTodo(todoId: string):ToggleTodoActionType {\n  return {\n    type: TOGGLE_TODO_ACTION,\n    payload: {\n      todoId\n    }\n  };\n}","import React, { Fragment, useRef } from 'react';\nimport './NewTodo.css';\nimport { useDispatch } from 'react-redux';\nimport { addTodoAction } from '../store/actions';\n\nimport uniqueId from 'lodash.uniqueid';\n\n\nexport const NewTodo = () => {\n  const dispatch = useDispatch();\n  const inputEl = useRef<HTMLInputElement>(null);\n\n  const onAddClick = () => {\n    if (inputEl !== null && inputEl.current !== null) {\n      const input = inputEl.current;\n      dispatch(addTodoAction({ id: uniqueId('td-'), text:input.value, completed: false }))\n      input.value= '';\n    }\n  };\n\n  return (\n    <Fragment>\n      <div className=\"newTodo\">\n        <input ref={inputEl} placeholder=\"enter new todo\" type=\"text\" name=\"text\" id=\"text\" />\n        <button onClick={onAddClick}>Add </button>\n      </div>\n    </Fragment>\n  )\n};","import  React from 'react';\nimport {useSelector} from 'react-redux';\nimport { AppState } from '../store/types';\n\n\nexport default ()=> {\n  const user = useSelector((state:AppState)=> state.user )\n  return (\n    <div className=\"userLogin\">\n      {user}\n    </div>\n  )\n}","import React from 'react';\nimport './App.css';\n\nimport { store } from './store';\nimport {TodoList} from './components/TodoList';\nimport {NewTodo} from './components/NewTodo';\nimport UserLogin from './components/UserLogin';\n\nimport { Provider } from 'react-redux';\n\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <UserLogin/>\n        </header>\n        <TodoList/>\n         <NewTodo/>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}